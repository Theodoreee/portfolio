{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nexport default {\n  name: \"CreationsPanel\",\n  data() {\n    return {\n      creations: [{\n        title: \"Création 1\",\n        image: require(\"@/assets/combattant_ia-v6.png\")\n      }, {\n        title: \"Création 2\",\n        image: require(\"@/assets/aaron2-v2.png\")\n      }, {\n        title: \"Création 3\",\n        image: require(\"@/assets/activision2-final.png\")\n      }, {\n        title: \"Création 4\",\n        image: require(\"@/assets/formule-final.png\")\n      }\n      // Ajoutez autant de créations que vous en avez\n      ],\n      isVisible: []\n    };\n  },\n  created() {\n    this.loadCreations();\n  },\n  mounted() {\n    this.observeCreations();\n  },\n  methods: {\n    goToContact() {\n      this.$router.push(\"/contact\");\n    },\n    // Fonction pour charger automatiquement les créations\n    loadCreations() {\n      const context = require.context('@/assets', false, /\\.(png|jpe?g|gif)$/); // Cible les fichiers d'images dans le dossier assets\n      const images = context.keys(); // Récupère les clés des fichiers dans le dossier\n      this.creations = images.map(image => {\n        return {\n          title: image.split('/').pop().replace(/\\.\\w+$/, ''),\n          // Utilise le nom du fichier sans l'extension comme titre\n          image: context(image)\n        };\n      });\n      this.isVisible = new Array(this.creations.length).fill(false);\n    },\n    observeCreations() {\n      const options = {\n        root: null,\n        // Utilise la fenêtre du navigateur\n        rootMargin: '0px',\n        threshold: 0.5 // Déclenche l'événement lorsque 50% de l'élément est visible\n      };\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          const index = Array.from(this.$refs.creationCards).indexOf(entry.target);\n          if (entry.isIntersecting) {\n            this.isVisible[index] = true; // Directement modifier l'indice de isVisible\n          }\n        });\n      }, options);\n      this.$refs.creationCards.forEach(card => {\n        observer.observe(card);\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","creations","title","image","require","isVisible","created","loadCreations","mounted","observeCreations","methods","goToContact","$router","push","context","images","keys","map","split","pop","replace","Array","length","fill","options","root","rootMargin","threshold","observer","IntersectionObserver","entries","forEach","entry","index","from","$refs","creationCards","indexOf","target","isIntersecting","card","observe"],"sources":["/home/theo/Bureau/portfolio/src/components/PortfolioPanel.vue"],"sourcesContent":["<template>\n    <section class=\"creations-panel\">\n        <h2 class=\"creations-title\">MES CRÉATIONS</h2>\n        <div class=\"creations-grid\">\n            <div class=\"creation-card\" v-for=\"(creation, index) in creations\" :key=\"index\" ref=\"creationCards\"\n                :class=\"{ 'fade-in': isVisible[index] }\">\n                <img :src=\"creation.image\" :alt=\"creation.title\" class=\"creation-image\" />\n            </div>\n        </div>\n        <!-- Bouton ajouté en dessous des créations -->\n        <div class=\"button-container\">\n            <button @click=\"goToContact\" class=\"portfolio-button\">CONTACT</button>\n        </div>\n    </section>\n</template>\n\n<script>\nexport default {\n    name: \"CreationsPanel\",\n    data() {\n        return {\n            creations: [\n                { title: \"Création 1\", image: require(\"@/assets/combattant_ia-v6.png\") },\n                { title: \"Création 2\", image: require(\"@/assets/aaron2-v2.png\") },\n                { title: \"Création 3\", image: require(\"@/assets/activision2-final.png\") },\n                { title: \"Création 4\", image: require(\"@/assets/formule-final.png\") },\n                // Ajoutez autant de créations que vous en avez\n            ],\n            isVisible: []\n        };\n    },\n    created() {\n        this.loadCreations();\n    },\n    mounted() {\n        this.observeCreations();\n    },\n    methods: {\n        goToContact() {\n            this.$router.push(\"/contact\");\n        },\n\n        // Fonction pour charger automatiquement les créations\n        loadCreations() {\n            const context = require.context('@/assets', false, /\\.(png|jpe?g|gif)$/); // Cible les fichiers d'images dans le dossier assets\n            const images = context.keys(); // Récupère les clés des fichiers dans le dossier\n            this.creations = images.map(image => {\n                return {\n                    title: image.split('/').pop().replace(/\\.\\w+$/, ''), // Utilise le nom du fichier sans l'extension comme titre\n                    image: context(image),\n                };\n            });\n            this.isVisible = new Array(this.creations.length).fill(false);\n        },\n\n        observeCreations() {\n            const options = {\n                root: null, // Utilise la fenêtre du navigateur\n                rootMargin: '0px',\n                threshold: 0.5 // Déclenche l'événement lorsque 50% de l'élément est visible\n            };\n\n            const observer = new IntersectionObserver((entries) => {\n                entries.forEach(entry => {\n                    const index = Array.from(this.$refs.creationCards).indexOf(entry.target);\n                    if (entry.isIntersecting) {\n                        this.isVisible[index] = true; // Directement modifier l'indice de isVisible\n                    }\n                });\n            }, options);\n\n            this.$refs.creationCards.forEach(card => {\n                observer.observe(card);\n            });\n        }\n    }\n};\n</script>\n\n<style scoped>\n.creations-panel {\n    font-family: \"blastered\";\n    align-items: center;\n    background-color: #242124;\n    padding: 3rem;\n    color: #fff;\n    min-height: 600px;\n    position: relative;\n    width: 90%;\n    margin: 0 auto;\n    left: 0;\n    right: 0;\n    z-index: 0;\n    box-sizing: border-box;\n    overflow: hidden;\n}\n\n.creations-title {\n    font-size: 3.8rem;\n    letter-spacing: 6px;\n    margin-top: 1.4em;\n    margin-bottom: 1.4em;\n    color: #E0B0FF;\n    text-align: center;\n}\n\n.creations-grid {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    /* 3 images par ligne */\n    gap: 3rem;\n    /* Espace entre les images */\n}\n\n.creation-card {\n    background-color: white;\n    border-radius: 8px;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    opacity: 0;\n    /* Commence en transparent */\n    transform: translateY(50px);\n    /* Commence légèrement décalé vers le bas */\n    transition: opacity 1s ease, transform 1s ease;\n    /* Durée de l'animation */\n}\n\n.creation-card.fade-in {\n    opacity: 1;\n    /* Devient visible */\n    transform: translateY(0);\n    /* Remontée à sa position initiale */\n}\n\n.creation-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.creation-image {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n/* Style pour le bouton */\n.button-container {\n    text-align: center;\n    margin-top: 2rem;\n}\n\n.portfolio-button {\n    font-family: \"blastered\";\n    background-color: #E0B0FF;\n    color: #242124;\n    font-size: 2rem;\n    padding: 0.8rem 2rem;\n    border: none;\n    border-radius: 30px;\n    cursor: pointer;\n    transition: background-color 0.3s ease, transform 0.3s ease;\n    margin-top: 1.3em;\n    margin-bottom: 1em;\n}\n\n.portfolio-button:hover {\n    background-color: #b590d0;\n    transform: scale(1.1);\n}\n\n@media (max-width: 768px) {\n    .creations-grid {\n        grid-template-columns: repeat(2, 1fr);\n        /* 2 images par ligne sur des écrans plus petits */\n    }\n}\n\n@media (max-width: 480px) {\n    .creations-grid {\n        grid-template-columns: 1fr;\n        /* 1 image par ligne sur des écrans très petits */\n    }\n}\n</style>\n"],"mappings":";;;;AAiBA,eAAe;EACXA,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,CACP;QAAEC,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAEC,OAAO,CAAC,+BAA+B;MAAE,CAAC,EACxE;QAAEF,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAEC,OAAO,CAAC,wBAAwB;MAAE,CAAC,EACjE;QAAEF,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAEC,OAAO,CAAC,gCAAgC;MAAE,CAAC,EACzE;QAAEF,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAEC,OAAO,CAAC,4BAA4B;MAAE;MACpE;MAAA,CACH;MACDC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC;IACjC,CAAC;IAED;IACAN,aAAaA,CAAA,EAAG;MACZ,MAAMO,OAAM,GAAIV,OAAO,CAACU,OAAO,CAAC,UAAU,EAAE,KAAK,EAAE,oBAAoB,CAAC,EAAE;MAC1E,MAAMC,MAAK,GAAID,OAAO,CAACE,IAAI,CAAC,CAAC,EAAE;MAC/B,IAAI,CAACf,SAAQ,GAAIc,MAAM,CAACE,GAAG,CAACd,KAAI,IAAK;QACjC,OAAO;UACHD,KAAK,EAAEC,KAAK,CAACe,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;UAAE;UACrDjB,KAAK,EAAEW,OAAO,CAACX,KAAK;QACxB,CAAC;MACL,CAAC,CAAC;MACF,IAAI,CAACE,SAAQ,GAAI,IAAIgB,KAAK,CAAC,IAAI,CAACpB,SAAS,CAACqB,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACjE,CAAC;IAEDd,gBAAgBA,CAAA,EAAG;MACf,MAAMe,OAAM,GAAI;QACZC,IAAI,EAAE,IAAI;QAAE;QACZC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,GAAE,CAAE;MACnB,CAAC;MAED,MAAMC,QAAO,GAAI,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;QACnDA,OAAO,CAACC,OAAO,CAACC,KAAI,IAAK;UACrB,MAAMC,KAAI,GAAIZ,KAAK,CAACa,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,CAAC,CAACC,OAAO,CAACL,KAAK,CAACM,MAAM,CAAC;UACxE,IAAIN,KAAK,CAACO,cAAc,EAAE;YACtB,IAAI,CAAClC,SAAS,CAAC4B,KAAK,IAAI,IAAI,EAAE;UAClC;QACJ,CAAC,CAAC;MACN,CAAC,EAAET,OAAO,CAAC;MAEX,IAAI,CAACW,KAAK,CAACC,aAAa,CAACL,OAAO,CAACS,IAAG,IAAK;QACrCZ,QAAQ,CAACa,OAAO,CAACD,IAAI,CAAC;MAC1B,CAAC,CAAC;IACN;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}